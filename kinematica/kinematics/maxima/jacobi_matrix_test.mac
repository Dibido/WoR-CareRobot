
/*
Author: Emiel Bosman
Transformation Matrix function,
Based on J. Craig, Robotics and Control 3rd Edition
*/

fpprintprec: 5;
Denavit : matrix(
    [cos(theta), -sin(theta), 0, a],
    [sin(theta)*cos(alpha), cos(theta) * cos(alpha) , -sin(alpha) , -sin(alpha)*d],
    [sin(theta)*sin(alpha), cos(theta)*sin(alpha), cos(alpha), cos(alpha) * d],
    [0, 0, 0, 1]);

J1 : subst([theta=t_1, alpha=0, a=0, d=0.333], Denavit);
J2 : subst([theta=t_2, alpha=-%pi/2, a=0, d=0], Denavit);
J3 : subst([theta=t_3, alpha=%pi/2, a=0, d=0.316],  Denavit);
J4 : subst([theta=t_4, alpha=%pi/2, a=0.0825, d=0],  Denavit);
J5 : subst([theta=t_5, alpha=-%pi/2, a=-0.0825, d=0.384], Denavit);
J6 : subst([theta=t_6, alpha=%pi/2, a=0, d=0], Denavit);
J7 : subst([theta=t_7, alpha=%pi/2, a=0.088, d=0],  Denavit);
FL : subst([theta=0,   alpha=0, a=0, d=0.107], Denavit);

T : J1 . J2 . J3 . J4 . J5 . J6 . J7 . FL;

yaw: atan2(T[2][1], T[1][1]);
pitch: atan2(-T[3][1], sqrt(T[3][2]*T[3][2] + T[3][3]*T[3][3]));
roll: atan2(T[3][2], T[3][3]);

TransformationABG : [T[1][4], T[2][4], T[3][4], yaw, pitch, roll];


Jacobian : jacobian(TransformationABG, [t_1, t_2, t_3, t_4, t_5, t_6, t_7]);

JacobiSubst : subst([
   t_1 = 0,
   t_2 = 0,
   t_3 = 0,
   t_4 = 0,
   t_5 = 0,
   t_6 = 0,
   t_7 = 0
], Jacobian);

stringout"JacobiStraightUp, float(%);

JacobiSubst : subst([
   t_1 = %pi/5,
   t_2 = %pi/3,
   t_3 = %pi/2,
   t_4 = %pi*1.5,
   t_5 = %pi*1.7,
   t_6 = %pi/8,
   t_7 = %pi/2
], Jacobian);
stringout("JacobiOne", float(%));
