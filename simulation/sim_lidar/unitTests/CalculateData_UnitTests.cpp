// Bring in gtest
#include <gtest/gtest.h>
// Bring in my package's API, which is what I'm testing
#define private public
#include <sim_lidar/CalculateData.hpp>
#undef private

#include <vector>

TEST(CalculateData, calculateStepSize)
{
  auto iterator = 0;
  const double cMaximumDeviation = 0.000005;
  const std::vector<double> cMeasurements = {
    8.41,   8.98,   9.59,   10.19,  10.80,  10.78,  11.36,  11.95,  12.53,
    13.12,  13.70,  14.27,  14.86,  15.44,  16.03,  16.59,  17.17,  17.77,
    18.34,  18.94,  19.50,  20.09,  20.67,  21.25,  21.81,  22.41,  22.98,
    23.56,  24.17,  24.73,  25.31,  25.89,  26.47,  27.06,  27.66,  28.23,
    28.80,  29.38,  29.97,  30.55,  31.12,  31.72,  32.27,  32.86,  33.45,
    34.03,  34.61,  34.75,  35.33,  35.88,  36.45,  37.02,  37.58,  38.16,
    38.73,  39.28,  39.89,  40.45,  40.98,  41.59,  42.12,  42.70,  43.28,
    43.84,  44.41,  44.97,  45.53,  46.12,  46.69,  47.28,  47.81,  48.38,
    48.94,  49.55,  50.09,  50.64,  51.23,  51.80,  52.38,  52.94,  53.52,
    54.08,  54.64,  55.22,  55.80,  56.36,  56.92,  57.48,  58.06,  58.61,
    59.16,  58.83,  59.36,  59.91,  60.47,  61.00,  61.55,  62.11,  62.64,
    63.17,  63.73,  64.25,  64.83,  65.39,  65.91,  66.44,  67.02,  67.52,
    68.09,  68.67,  69.20,  69.75,  70.28,  70.83,  71.34,  71.91,  72.48,
    73.03,  73.53,  74.09,  74.62,  75.20,  75.72,  76.25,  76.78,  77.34,
    78.19,  78.75,  86.30,  86.84,  87.38,  87.92,  81.17,  81.69,  82.23,
    82.78,  82.89,  83.42,  83.98,  84.48,  85.05,  85.58,  86.09,  86.66,
    87.16,  87.69,  88.22,  88.78,  89.33,  89.84,  90.36,  90.91,  91.45,
    92.00,  92.52,  93.03,  93.61,  94.16,  94.73,  95.28,  95.83,  96.38,
    96.95,  97.50,  98.05,  98.58,  99.09,  99.64,  100.20, 107.80, 101.25,
    101.73, 102.30, 109.92, 103.39, 103.98, 104.53, 105.06, 105.61, 106.17,
    106.70, 107.27, 107.84, 107.36, 107.92, 108.41, 108.94, 109.47, 110.03,
    110.53, 111.09, 111.58, 112.12, 112.62, 113.20, 113.73, 114.25, 114.73,
    115.31, 115.80, 116.31, 116.86, 117.42, 117.88, 118.48, 118.98, 119.45,
    120.00, 120.52, 121.11, 121.53, 122.09, 122.89, 123.44, 124.02, 124.48,
    125.05, 125.55, 126.12, 126.62, 127.17, 127.70, 128.16, 128.64, 129.20,
    129.72, 130.20, 130.89, 131.41, 131.86, 132.36, 132.03, 132.55, 133.12,
    133.59, 134.06, 134.62, 135.12, 135.70, 136.02, 136.56, 137.03, 137.67,
    138.16, 138.62, 139.12, 139.53, 140.17, 140.55, 141.23, 141.58, 142.16,
    142.62, 143.06, 143.64, 144.25, 144.77, 145.16, 145.59, 146.12, 146.64,
    147.20, 147.72, 148.22, 148.70, 149.16, 149.61, 150.06, 150.59, 151.28,
    151.61, 152.28, 152.61, 153.19, 153.75, 154.20, 154.70, 155.22, 155.56,
    156.27, 156.70, 156.64, 157.02, 163.22, 163.70, 164.19, 164.67, 165.16,
    165.64, 166.12, 166.61, 167.09, 167.58, 168.06, 165.75, 169.02, 169.50,
    169.75, 170.47, 170.95, 171.19, 169.91, 172.41, 172.89, 173.12, 173.86,
    174.33, 174.81, 175.30, 175.78, 176.27, 176.75, 177.23, 177.72, 178.20,
    178.69, 179.16, 179.64, 180.39, 180.61, 181.09, 181.58, 182.06, 182.55,
    183.03, 182.86, 183.75, 184.23, 183.58, 185.20, 184.72, 186.17, 186.64,
    186.36, 186.59, 187.06, 187.53, 187.98, 188.05, 187.97, 189.39, 189.84,
    190.31, 190.66, 191.25, 191.70, 192.17, 192.62, 193.09, 192.53, 194.02,
    194.48, 194.95, 194.62, 195.88, 196.34, 197.06, 197.52, 197.98, 198.45,
    198.91, 199.38, 199.83, 200.30, 200.77, 201.23, 201.69, 202.16, 202.62,
    203.08, 203.55, 204.02, 204.47, 204.94, 199.81, 200.39, 200.77, 201.25,
    201.72, 202.22, 202.73, 203.20, 203.66, 204.06, 204.52, 210.50, 210.28,
    205.11, 211.12, 206.78, 207.59, 212.48, 208.34, 208.77, 209.25, 209.83,
    210.09, 210.67, 210.89, 211.66, 212.19, 212.61, 213.06, 213.20, 213.86,
    214.09, 214.62, 219.73, 220.19, 220.64, 221.09, 221.55, 221.98, 222.44,
    222.89, 223.34, 223.80, 224.25, 224.69, 225.14, 225.59, 226.05, 226.50,
    226.95, 227.41, 227.84, 228.30, 228.75, 229.22, 229.66, 230.11, 230.55,
    231.00, 231.45, 231.91, 232.36, 232.81, 233.25, 233.70, 234.16, 234.61,
    234.00, 234.42, 234.86, 235.28, 235.72, 236.16, 236.58, 237.02, 237.44,
    237.88, 238.31, 238.73, 239.17, 239.59, 240.03, 240.47, 240.89, 241.33,
    241.75, 242.19, 242.61, 243.05, 243.48, 238.42, 244.34, 244.77, 245.20,
    245.64, 246.06, 246.50, 246.92, 247.36, 247.78, 248.22, 245.31, 246.16,
    246.64, 247.00, 247.62, 248.08, 248.30, 248.78, 252.09, 252.53, 252.95,
    253.39, 253.83, 254.25, 254.69, 255.12, 255.55, 255.98, 256.41, 256.84,
    257.27, 257.70, 258.14, 258.56, 259.00, 258.36, 258.78, 252.12, 252.53,
    256.20, 256.83, 257.30, 257.98, 258.50, 258.86, 258.89, 259.16, 260.17,
    260.09, 261.27, 261.73, 262.11, 265.36, 264.27, 263.84, 265.88, 266.80,
    267.20, 266.66, 267.34, 266.78, 267.36, 267.80, 268.02, 268.41, 269.77,
    269.30, 269.50, 271.75, 270.00, 270.39, 271.52, 271.69, 271.81, 272.56,
    272.42, 274.36, 275.70, 276.12, 276.28, 275.36, 275.53, 276.53, 276.50,
    278.36, 278.08, 279.17, 278.38, 278.97, 279.59, 279.84, 280.38, 281.66,
    281.25, 282.48, 282.00, 280.84, 282.80, 283.20, 283.59, 283.98, 284.06,
    284.45, 284.31, 285.58, 284.91, 285.38, 285.70, 286.42, 287.16, 287.97,
    287.16, 287.45, 287.80, 289.56, 289.97, 290.36, 290.77, 290.12, 291.56,
    291.95, 292.36, 291.58, 293.16, 293.55, 293.95, 294.34, 294.75, 294.58,
    295.53, 294.86, 295.83, 296.05, 297.12, 297.53, 298.17, 298.33, 297.77,
    298.62, 298.64, 299.92, 300.31, 299.89, 301.11, 301.52, 301.91, 302.31,
    301.88, 303.11, 303.50, 302.98, 303.42, 304.70, 304.59, 304.81, 305.89,
    306.28, 306.69, 305.80, 306.17, 306.56, 306.94, 307.31, 307.69, 308.06,
    308.44, 308.81, 309.20, 309.58, 309.95, 310.58, 309.92, 311.08, 311.45,
    311.72, 312.22, 312.59, 312.97, 313.34, 312.94, 314.11, 314.48, 314.86,
    315.23, 315.61, 316.00, 316.38, 316.42, 316.44, 317.00, 317.88, 318.27,
    317.81, 317.91, 319.39, 319.77, 320.14, 320.53, 320.91, 321.28, 321.66,
    322.03, 322.41, 321.52, 322.84, 323.55, 323.92, 324.30, 324.67, 325.06,
    324.52, 325.81, 325.19, 326.56, 326.53, 326.28, 327.70, 327.05, 328.45,
    328.83, 329.20, 328.80, 329.97, 328.94, 330.72, 328.61, 328.70, 330.67,
    329.38, 329.91, 330.52, 332.12, 332.48, 332.84, 333.20, 331.84, 333.52,
    334.28, 333.50, 333.50, 334.58, 334.66, 334.72, 336.45, 334.78, 335.83,
    335.81, 336.25, 336.20, 338.86, 339.22, 339.58, 339.94, 338.02, 340.66,
    341.02, 341.38, 341.73, 342.09, 342.45, 342.83, 343.19, 343.55, 343.91,
    344.27, 344.62, 344.98, 345.34, 345.70, 346.06, 346.42, 346.78, 347.14,
    347.50, 347.88, 348.23, 348.59, 348.95, 349.31, 349.67, 350.03, 350.39,
    350.75, 351.11, 351.47, 351.83, 352.19, 352.55, 352.92, 353.28, 345.94,
    354.00, 346.61, 346.97, 347.34, 355.44, 346.47, 354.56, 354.91, 347.47,
    347.83, 355.92, 356.27, 356.59, 356.94, 349.50, 349.86, 350.19, 350.53,
    358.62, 358.97,
  };
  const std::vector<double> stepSize = {
    0.57, 0.61, 0.6,  0.61, 0.58, 0.59, 0.58, 0.59, 0.58, 0.57, 0.59, 0.58,
    0.59, 0.56, 0.58, 0.6,  0.57, 0.6,  0.56, 0.59, 0.58, 0.58, 0.56, 0.6,
    0.57, 0.58, 0.61, 0.56, 0.58, 0.58, 0.58, 0.59, 0.6,  0.57, 0.57, 0.58,
    0.59, 0.58, 0.57, 0.6,  0.55, 0.59, 0.59, 0.58, 0.58, 0.14, 0.58, 0.55,
    0.57, 0.57, 0.56, 0.58, 0.57, 0.55, 0.61, 0.56, 0.53, 0.61, 0.53, 0.58,
    0.58, 0.56, 0.57, 0.56, 0.56, 0.59, 0.57, 0.59, 0.53, 0.57, 0.56, 0.61,
    0.54, 0.55, 0.59, 0.57, 0.58, 0.56, 0.58, 0.56, 0.56, 0.58, 0.58, 0.56,
    0.56, 0.56, 0.58, 0.55, 0.55, 0.53, 0.55, 0.56, 0.53, 0.55, 0.56, 0.53,
    0.53, 0.56, 0.52, 0.58, 0.56, 0.52, 0.53, 0.58, 0.5,  0.57, 0.58, 0.53,
    0.55, 0.53, 0.55, 0.51, 0.57, 0.57, 0.55, 0.5,  0.56, 0.53, 0.58, 0.52,
    0.53, 0.53, 0.56, 0.85, 0.56, 0.54, 0.54, 0.54, 0.52, 0.54, 0.55, 0.11,
    0.53, 0.56, 0.5,  0.57, 0.53, 0.51, 0.57, 0.5,  0.53, 0.53, 0.56, 0.55,
    0.51, 0.52, 0.55, 0.54, 0.55, 0.52, 0.51, 0.58, 0.55, 0.57, 0.55, 0.55,
    0.55, 0.57, 0.55, 0.55, 0.53, 0.51, 0.55, 0.56, 0.48, 0.57, 0.59, 0.55,
    0.53, 0.55, 0.56, 0.53, 0.57, 0.57, 0.56, 0.49, 0.53, 0.53, 0.56, 0.5,
    0.56, 0.49, 0.54, 0.5,  0.58, 0.53, 0.52, 0.48, 0.58, 0.49, 0.51, 0.55,
    0.56, 0.46, 0.6,  0.5,  0.47, 0.55, 0.52, 0.59, 0.42, 0.56, 0.8,  0.55,
    0.58, 0.46, 0.57, 0.5,  0.57, 0.5,  0.55, 0.53, 0.46, 0.48, 0.56, 0.52,
    0.48, 0.69, 0.52, 0.45, 0.5,  0.52, 0.57, 0.47, 0.47, 0.56, 0.5,  0.58,
    0.32, 0.54, 0.47, 0.64, 0.49, 0.46, 0.5,  0.41, 0.64, 0.38, 0.68, 0.35,
    0.58, 0.46, 0.44, 0.58, 0.61, 0.52, 0.39, 0.43, 0.53, 0.52, 0.56, 0.52,
    0.5,  0.48, 0.46, 0.45, 0.45, 0.53, 0.69, 0.33, 0.67, 0.33, 0.58, 0.56,
    0.45, 0.5,  0.52, 0.34, 0.71, 0.43, 0.38, 0.48, 0.49, 0.48, 0.49, 0.48,
    0.48, 0.49, 0.48, 0.49, 0.48, 0.48, 0.25, 0.72, 0.48, 0.24, 0.48, 0.23,
    0.74, 0.47, 0.48, 0.49, 0.48, 0.49, 0.48, 0.48, 0.49, 0.48, 0.49, 0.47,
    0.48, 0.75, 0.22, 0.48, 0.49, 0.48, 0.49, 0.48, 0.89, 0.48, 0.47, 0.23,
    0.47, 0.47, 0.45, 0.07, 0.45, 0.47, 0.35, 0.59, 0.45, 0.47, 0.45, 0.47,
    0.46, 0.47, 0.46, 0.72, 0.46, 0.46, 0.47, 0.46, 0.47, 0.45, 0.47, 0.47,
    0.46, 0.46, 0.47, 0.46, 0.46, 0.47, 0.47, 0.45, 0.47, 0.58, 0.38, 0.48,
    0.47, 0.5,  0.51, 0.47, 0.46, 0.4,  0.46, 0.81, 0.43, 0.48, 0.58, 0.26,
    0.58, 0.22, 0.77, 0.53, 0.42, 0.45, 0.14, 0.66, 0.23, 0.53, 0.46, 0.45,
    0.45, 0.46, 0.43, 0.46, 0.45, 0.45, 0.46, 0.45, 0.44, 0.45, 0.45, 0.46,
    0.45, 0.45, 0.46, 0.43, 0.46, 0.45, 0.47, 0.44, 0.45, 0.44, 0.45, 0.45,
    0.46, 0.45, 0.45, 0.44, 0.45, 0.46, 0.45, 0.42, 0.44, 0.42, 0.44, 0.44,
    0.42, 0.44, 0.42, 0.44, 0.43, 0.42, 0.44, 0.42, 0.44, 0.44, 0.42, 0.44,
    0.42, 0.44, 0.42, 0.44, 0.43, 0.43, 0.43, 0.44, 0.42, 0.44, 0.42, 0.44,
    0.42, 0.44, 0.85, 0.48, 0.36, 0.62, 0.46, 0.22, 0.48, 0.44, 0.42, 0.44,
    0.44, 0.42, 0.44, 0.43, 0.43, 0.43, 0.43, 0.43, 0.43, 0.43, 0.44, 0.42,
    0.44, 0.42, 0.41, 0.63, 0.47, 0.68, 0.52, 0.36, 0.03, 0.27, 0.46, 0.38,
    0.92, 0.4,  0.68, 0.58, 0.44, 0.22, 0.39, 0.2,  0.39, 0.17, 0.12, 0.75,
    0.42, 0.16, 0.17, 0.59, 0.62, 0.25, 0.54, 0.4,  0.39, 0.39, 0.08, 0.39,
    0.47, 0.32, 0.72, 0.74, 0.81, 0.29, 0.35, 0.41, 0.39, 0.41, 0.39, 0.41,
    0.39, 0.4,  0.39, 0.41, 0.95, 0.97, 0.22, 0.41, 0.64, 0.16, 0.85, 0.02,
    0.39, 0.41, 0.39, 0.4,  0.39, 0.44, 0.22, 0.39, 0.41, 0.37, 0.39, 0.38,
    0.37, 0.38, 0.37, 0.38, 0.37, 0.39, 0.38, 0.37, 0.63, 0.37, 0.27, 0.5,
    0.37, 0.38, 0.37, 0.37, 0.38, 0.37, 0.38, 0.39, 0.38, 0.04, 0.02, 0.56,
    0.88, 0.39, 0.1,  0.38, 0.37, 0.39, 0.38, 0.37, 0.38, 0.37, 0.38, 0.71,
    0.37, 0.38, 0.37, 0.39, 0.38, 0.37, 0.09, 0.53, 0.61, 0.36, 0.36, 0.36,
    0.76, 0.08, 0.06, 0.44, 0.36, 0.36, 0.36, 0.36, 0.36, 0.35, 0.36, 0.36,
    0.38, 0.36, 0.36, 0.36, 0.36, 0.35, 0.36, 0.36, 0.36, 0.36, 0.36, 0.36,
    0.36, 0.36, 0.38, 0.35, 0.36, 0.36, 0.36, 0.36, 0.36, 0.36, 0.36, 0.36,
    0.36, 0.36, 0.36, 0.36, 0.37, 0.36, 0.36, 0.37, 0.35, 0.36, 0.35, 0.32,
    0.35, 0.36, 0.33, 0.34, 0.35,
  };

  calculate::Calculatedata lCalcData(cMeasurements);
  lCalcData.calculateStepSize();
  for (const auto& step : lCalcData.mStepSize)
  {
    EXPECT_NEAR(stepSize[iterator], step, cMaximumDeviation);
    ++iterator;
  }
}

TEST(CalculateData, calculateAverage)
{
  calculate::Calculatedata lCalcData;
  const double cMean = 0.476773;
  const std::vector<double> cMeasurements = {
    0.57, 0.61, 0.6,  0.61, 0.58, 0.59, 0.58, 0.59, 0.58, 0.57, 0.59, 0.58,
    0.59, 0.56, 0.58, 0.6,  0.57, 0.6,  0.56, 0.59, 0.58, 0.58, 0.56, 0.6,
    0.57, 0.58, 0.61, 0.56, 0.58, 0.58, 0.58, 0.59, 0.6,  0.57, 0.57, 0.58,
    0.59, 0.58, 0.57, 0.6,  0.55, 0.59, 0.59, 0.58, 0.58, 0.14, 0.58, 0.55,
    0.57, 0.57, 0.56, 0.58, 0.57, 0.55, 0.61, 0.56, 0.53, 0.61, 0.53, 0.58,
    0.58, 0.56, 0.57, 0.56, 0.56, 0.59, 0.57, 0.59, 0.53, 0.57, 0.56, 0.61,
    0.54, 0.55, 0.59, 0.57, 0.58, 0.56, 0.58, 0.56, 0.56, 0.58, 0.58, 0.56,
    0.56, 0.56, 0.58, 0.55, 0.55, 0.53, 0.55, 0.56, 0.53, 0.55, 0.56, 0.53,
    0.53, 0.56, 0.52, 0.58, 0.56, 0.52, 0.53, 0.58, 0.5,  0.57, 0.58, 0.53,
    0.55, 0.53, 0.55, 0.51, 0.57, 0.57, 0.55, 0.5,  0.56, 0.53, 0.58, 0.52,
    0.53, 0.53, 0.56, 0.85, 0.56, 0.54, 0.54, 0.54, 0.52, 0.54, 0.55, 0.11,
    0.53, 0.56, 0.5,  0.57, 0.53, 0.51, 0.57, 0.5,  0.53, 0.53, 0.56, 0.55,
    0.51, 0.52, 0.55, 0.54, 0.55, 0.52, 0.51, 0.58, 0.55, 0.57, 0.55, 0.55,
    0.55, 0.57, 0.55, 0.55, 0.53, 0.51, 0.55, 0.56, 0.48, 0.57, 0.59, 0.55,
    0.53, 0.55, 0.56, 0.53, 0.57, 0.57, 0.56, 0.49, 0.53, 0.53, 0.56, 0.5,
    0.56, 0.49, 0.54, 0.5,  0.58, 0.53, 0.52, 0.48, 0.58, 0.49, 0.51, 0.55,
    0.56, 0.46, 0.6,  0.5,  0.47, 0.55, 0.52, 0.59, 0.42, 0.56, 0.8,  0.55,
    0.58, 0.46, 0.57, 0.5,  0.57, 0.5,  0.55, 0.53, 0.46, 0.48, 0.56, 0.52,
    0.48, 0.69, 0.52, 0.45, 0.5,  0.52, 0.57, 0.47, 0.47, 0.56, 0.5,  0.58,
    0.32, 0.54, 0.47, 0.64, 0.49, 0.46, 0.5,  0.41, 0.64, 0.38, 0.68, 0.35,
    0.58, 0.46, 0.44, 0.58, 0.61, 0.52, 0.39, 0.43, 0.53, 0.52, 0.56, 0.52,
    0.5,  0.48, 0.46, 0.45, 0.45, 0.53, 0.69, 0.33, 0.67, 0.33, 0.58, 0.56,
    0.45, 0.5,  0.52, 0.34, 0.71, 0.43, 0.38, 0.48, 0.49, 0.48, 0.49, 0.48,
    0.48, 0.49, 0.48, 0.49, 0.48, 0.48, 0.25, 0.72, 0.48, 0.24, 0.48, 0.23,
    0.74, 0.47, 0.48, 0.49, 0.48, 0.49, 0.48, 0.48, 0.49, 0.48, 0.49, 0.47,
    0.48, 0.75, 0.22, 0.48, 0.49, 0.48, 0.49, 0.48, 0.89, 0.48, 0.47, 0.23,
    0.47, 0.47, 0.45, 0.07, 0.45, 0.47, 0.35, 0.59, 0.45, 0.47, 0.45, 0.47,
    0.46, 0.47, 0.46, 0.72, 0.46, 0.46, 0.47, 0.46, 0.47, 0.45, 0.47, 0.47,
    0.46, 0.46, 0.47, 0.46, 0.46, 0.47, 0.47, 0.45, 0.47, 0.58, 0.38, 0.48,
    0.47, 0.5,  0.51, 0.47, 0.46, 0.4,  0.46, 0.81, 0.43, 0.48, 0.58, 0.26,
    0.58, 0.22, 0.77, 0.53, 0.42, 0.45, 0.14, 0.66, 0.23, 0.53, 0.46, 0.45,
    0.45, 0.46, 0.43, 0.46, 0.45, 0.45, 0.46, 0.45, 0.44, 0.45, 0.45, 0.46,
    0.45, 0.45, 0.46, 0.43, 0.46, 0.45, 0.47, 0.44, 0.45, 0.44, 0.45, 0.45,
    0.46, 0.45, 0.45, 0.44, 0.45, 0.46, 0.45, 0.42, 0.44, 0.42, 0.44, 0.44,
    0.42, 0.44, 0.42, 0.44, 0.43, 0.42, 0.44, 0.42, 0.44, 0.44, 0.42, 0.44,
    0.42, 0.44, 0.42, 0.44, 0.43, 0.43, 0.43, 0.44, 0.42, 0.44, 0.42, 0.44,
    0.42, 0.44, 0.85, 0.48, 0.36, 0.62, 0.46, 0.22, 0.48, 0.44, 0.42, 0.44,
    0.44, 0.42, 0.44, 0.43, 0.43, 0.43, 0.43, 0.43, 0.43, 0.43, 0.44, 0.42,
    0.44, 0.42, 0.41, 0.63, 0.47, 0.68, 0.52, 0.36, 0.03, 0.27, 0.46, 0.38,
    0.92, 0.4,  0.68, 0.58, 0.44, 0.22, 0.39, 0.2,  0.39, 0.17, 0.12, 0.75,
    0.42, 0.16, 0.17, 0.59, 0.62, 0.25, 0.54, 0.4,  0.39, 0.39, 0.08, 0.39,
    0.47, 0.32, 0.72, 0.74, 0.81, 0.29, 0.35, 0.41, 0.39, 0.41, 0.39, 0.41,
    0.39, 0.4,  0.39, 0.41, 0.95, 0.97, 0.22, 0.41, 0.64, 0.16, 0.85, 0.02,
    0.39, 0.41, 0.39, 0.4,  0.39, 0.44, 0.22, 0.39, 0.41, 0.37, 0.39, 0.38,
    0.37, 0.38, 0.37, 0.38, 0.37, 0.39, 0.38, 0.37, 0.63, 0.37, 0.27, 0.5,
    0.37, 0.38, 0.37, 0.37, 0.38, 0.37, 0.38, 0.39, 0.38, 0.04, 0.02, 0.56,
    0.88, 0.39, 0.1,  0.38, 0.37, 0.39, 0.38, 0.37, 0.38, 0.37, 0.38, 0.71,
    0.37, 0.38, 0.37, 0.39, 0.38, 0.37, 0.09, 0.53, 0.61, 0.36, 0.36, 0.36,
    0.76, 0.08, 0.06, 0.44, 0.36, 0.36, 0.36, 0.36, 0.36, 0.35, 0.36, 0.36,
    0.38, 0.36, 0.36, 0.36, 0.36, 0.35, 0.36, 0.36, 0.36, 0.36, 0.36, 0.36,
    0.36, 0.36, 0.38, 0.35, 0.36, 0.36, 0.36, 0.36, 0.36, 0.36, 0.36, 0.36,
    0.36, 0.36, 0.36, 0.36, 0.37, 0.36, 0.36, 0.37, 0.35, 0.36, 0.35, 0.32,
    0.35, 0.36, 0.33, 0.34, 0.35,
  };
  const double cMaximumDeviation = 0.000005;
  lCalcData.mStepSize = cMeasurements;
  lCalcData.calculateAverage();
  EXPECT_NEAR(cMean, lCalcData.mMean, cMaximumDeviation);
}

TEST(CalculateData, calculateDeviation)
{
  calculate::Calculatedata lCalcData;
  const double cMean = 0.476773;
  const double cDeviation = 0.125522;
  const double cMaximumDeviation = 0.000005;
  const std::vector<double> cMeasurements = {
    0.57, 0.61, 0.6,  0.61, 0.58, 0.59, 0.58, 0.59, 0.58, 0.57, 0.59, 0.58,
    0.59, 0.56, 0.58, 0.6,  0.57, 0.6,  0.56, 0.59, 0.58, 0.58, 0.56, 0.6,
    0.57, 0.58, 0.61, 0.56, 0.58, 0.58, 0.58, 0.59, 0.6,  0.57, 0.57, 0.58,
    0.59, 0.58, 0.57, 0.6,  0.55, 0.59, 0.59, 0.58, 0.58, 0.14, 0.58, 0.55,
    0.57, 0.57, 0.56, 0.58, 0.57, 0.55, 0.61, 0.56, 0.53, 0.61, 0.53, 0.58,
    0.58, 0.56, 0.57, 0.56, 0.56, 0.59, 0.57, 0.59, 0.53, 0.57, 0.56, 0.61,
    0.54, 0.55, 0.59, 0.57, 0.58, 0.56, 0.58, 0.56, 0.56, 0.58, 0.58, 0.56,
    0.56, 0.56, 0.58, 0.55, 0.55, 0.53, 0.55, 0.56, 0.53, 0.55, 0.56, 0.53,
    0.53, 0.56, 0.52, 0.58, 0.56, 0.52, 0.53, 0.58, 0.5,  0.57, 0.58, 0.53,
    0.55, 0.53, 0.55, 0.51, 0.57, 0.57, 0.55, 0.5,  0.56, 0.53, 0.58, 0.52,
    0.53, 0.53, 0.56, 0.85, 0.56, 0.54, 0.54, 0.54, 0.52, 0.54, 0.55, 0.11,
    0.53, 0.56, 0.5,  0.57, 0.53, 0.51, 0.57, 0.5,  0.53, 0.53, 0.56, 0.55,
    0.51, 0.52, 0.55, 0.54, 0.55, 0.52, 0.51, 0.58, 0.55, 0.57, 0.55, 0.55,
    0.55, 0.57, 0.55, 0.55, 0.53, 0.51, 0.55, 0.56, 0.48, 0.57, 0.59, 0.55,
    0.53, 0.55, 0.56, 0.53, 0.57, 0.57, 0.56, 0.49, 0.53, 0.53, 0.56, 0.5,
    0.56, 0.49, 0.54, 0.5,  0.58, 0.53, 0.52, 0.48, 0.58, 0.49, 0.51, 0.55,
    0.56, 0.46, 0.6,  0.5,  0.47, 0.55, 0.52, 0.59, 0.42, 0.56, 0.8,  0.55,
    0.58, 0.46, 0.57, 0.5,  0.57, 0.5,  0.55, 0.53, 0.46, 0.48, 0.56, 0.52,
    0.48, 0.69, 0.52, 0.45, 0.5,  0.52, 0.57, 0.47, 0.47, 0.56, 0.5,  0.58,
    0.32, 0.54, 0.47, 0.64, 0.49, 0.46, 0.5,  0.41, 0.64, 0.38, 0.68, 0.35,
    0.58, 0.46, 0.44, 0.58, 0.61, 0.52, 0.39, 0.43, 0.53, 0.52, 0.56, 0.52,
    0.5,  0.48, 0.46, 0.45, 0.45, 0.53, 0.69, 0.33, 0.67, 0.33, 0.58, 0.56,
    0.45, 0.5,  0.52, 0.34, 0.71, 0.43, 0.38, 0.48, 0.49, 0.48, 0.49, 0.48,
    0.48, 0.49, 0.48, 0.49, 0.48, 0.48, 0.25, 0.72, 0.48, 0.24, 0.48, 0.23,
    0.74, 0.47, 0.48, 0.49, 0.48, 0.49, 0.48, 0.48, 0.49, 0.48, 0.49, 0.47,
    0.48, 0.75, 0.22, 0.48, 0.49, 0.48, 0.49, 0.48, 0.89, 0.48, 0.47, 0.23,
    0.47, 0.47, 0.45, 0.07, 0.45, 0.47, 0.35, 0.59, 0.45, 0.47, 0.45, 0.47,
    0.46, 0.47, 0.46, 0.72, 0.46, 0.46, 0.47, 0.46, 0.47, 0.45, 0.47, 0.47,
    0.46, 0.46, 0.47, 0.46, 0.46, 0.47, 0.47, 0.45, 0.47, 0.58, 0.38, 0.48,
    0.47, 0.5,  0.51, 0.47, 0.46, 0.4,  0.46, 0.81, 0.43, 0.48, 0.58, 0.26,
    0.58, 0.22, 0.77, 0.53, 0.42, 0.45, 0.14, 0.66, 0.23, 0.53, 0.46, 0.45,
    0.45, 0.46, 0.43, 0.46, 0.45, 0.45, 0.46, 0.45, 0.44, 0.45, 0.45, 0.46,
    0.45, 0.45, 0.46, 0.43, 0.46, 0.45, 0.47, 0.44, 0.45, 0.44, 0.45, 0.45,
    0.46, 0.45, 0.45, 0.44, 0.45, 0.46, 0.45, 0.42, 0.44, 0.42, 0.44, 0.44,
    0.42, 0.44, 0.42, 0.44, 0.43, 0.42, 0.44, 0.42, 0.44, 0.44, 0.42, 0.44,
    0.42, 0.44, 0.42, 0.44, 0.43, 0.43, 0.43, 0.44, 0.42, 0.44, 0.42, 0.44,
    0.42, 0.44, 0.85, 0.48, 0.36, 0.62, 0.46, 0.22, 0.48, 0.44, 0.42, 0.44,
    0.44, 0.42, 0.44, 0.43, 0.43, 0.43, 0.43, 0.43, 0.43, 0.43, 0.44, 0.42,
    0.44, 0.42, 0.41, 0.63, 0.47, 0.68, 0.52, 0.36, 0.03, 0.27, 0.46, 0.38,
    0.92, 0.4,  0.68, 0.58, 0.44, 0.22, 0.39, 0.2,  0.39, 0.17, 0.12, 0.75,
    0.42, 0.16, 0.17, 0.59, 0.62, 0.25, 0.54, 0.4,  0.39, 0.39, 0.08, 0.39,
    0.47, 0.32, 0.72, 0.74, 0.81, 0.29, 0.35, 0.41, 0.39, 0.41, 0.39, 0.41,
    0.39, 0.4,  0.39, 0.41, 0.95, 0.97, 0.22, 0.41, 0.64, 0.16, 0.85, 0.02,
    0.39, 0.41, 0.39, 0.4,  0.39, 0.44, 0.22, 0.39, 0.41, 0.37, 0.39, 0.38,
    0.37, 0.38, 0.37, 0.38, 0.37, 0.39, 0.38, 0.37, 0.63, 0.37, 0.27, 0.5,
    0.37, 0.38, 0.37, 0.37, 0.38, 0.37, 0.38, 0.39, 0.38, 0.04, 0.02, 0.56,
    0.88, 0.39, 0.1,  0.38, 0.37, 0.39, 0.38, 0.37, 0.38, 0.37, 0.38, 0.71,
    0.37, 0.38, 0.37, 0.39, 0.38, 0.37, 0.09, 0.53, 0.61, 0.36, 0.36, 0.36,
    0.76, 0.08, 0.06, 0.44, 0.36, 0.36, 0.36, 0.36, 0.36, 0.35, 0.36, 0.36,
    0.38, 0.36, 0.36, 0.36, 0.36, 0.35, 0.36, 0.36, 0.36, 0.36, 0.36, 0.36,
    0.36, 0.36, 0.38, 0.35, 0.36, 0.36, 0.36, 0.36, 0.36, 0.36, 0.36, 0.36,
    0.36, 0.36, 0.36, 0.36, 0.37, 0.36, 0.36, 0.37, 0.35, 0.36, 0.35, 0.32,
    0.35, 0.36, 0.33, 0.34, 0.35,
  };

  lCalcData.mStepSize = cMeasurements;
  lCalcData.mMean = cMean;

  lCalcData.calculateDeviation();
  EXPECT_NEAR(cDeviation, lCalcData.mDeviation, cMaximumDeviation);
}
