// Bring in gtest
#include <gtest/gtest.h>
// Bring in my package's API, which is what I'm testing
#define private public
#include <sim_lidar/GenerateNoise.hpp>
#undef private

#include <vector>

TEST(GenerateNoise, generateSample)
{ 
  generate::GenerateNoise lGenerateNoise;
  unsigned int iterator = 0;
  const double cMean = 0.476773;
  const double cDeviation = 0.125522;
  const double cMaximumDeviation = 0.000005;
  const std::vector<double> samplesTest = {
    0.617708, 0.407768, 0.47394,  0.499885, 0.516798, 0.490303, 0.45467,
    0.386379, 0.622532, 0.474932, 0.470338, 0.501916, 0.60866,  0.60572,
    0.505252, 0.522593, 0.425941, 0.523574, 0.461391, 0.236322, 0.493437,
    0.554261, 0.608878, 0.348674, 0.448051, 0.400818, 0.350638, 0.584767,
    0.409558, 0.405172, 0.697371, 0.676507, 0.461995, 0.614242, 0.434916,
    0.718513, 0.507827, 0.486293, 0.449741, 0.613177, 0.374335, 0.331431,
    0.407706, 0.356269, 0.418295, 0.610644, 0.58401,  0.421143, 0.274426,
    0.677133, 0.443852, 0.490513, 0.438652, 0.588147, 0.38933,  0.504256,
    0.694769, 0.676287, 0.296425, 0.542302, 0.569855, 0.399392, 0.245634,
    0.429109, 0.512916, 0.523915, 0.398146, 0.611913, 0.653159, 0.675828,
    0.397192, 0.430083, 0.502336, 0.586251, 0.565981, 0.600153, 0.419288,
    0.466141, 0.499548, 0.365724, 0.518763, 0.643416, 0.452552, 0.62929,
    0.35538,  0.486221, 0.518402, 0.445645, 0.576725, 0.674357, 0.429045,
    0.475286, 0.457165, 0.604231, 0.528677, 0.562833, 0.5998,   0.54315,
    0.525946, 0.575471, 0.364649, 0.552706, 0.370537, 0.574401, 0.514236,
    0.589085, 0.447361, 0.479059, 0.479568, 0.472997, 0.406467, 0.430891,
    0.348691, 0.449112, 0.51245,  0.365437, 0.496005, 0.710683, 0.455823,
    0.440563, 0.725641, 0.400423, 0.465858, 0.405274, 0.649207, 0.395003,
    0.426191, 0.492809, 0.524882, 0.768004, 0.451679, 0.417885, 0.462664,
    0.541884, 0.545089, 0.430476, 0.460238, 0.244342, 0.400173, 0.424984,
    0.626987, 0.308379, 0.36689,  0.490638, 0.418246, 0.430594, 0.614452,
    0.617695, 0.531488, 0.538554, 0.493313, 0.397027, 0.355808, 0.363846,
    0.568218, 0.576735, 0.45458,  0.71,     0.551988, 0.388286, 0.654983,
    0.400846, 0.380503, 0.376969, 0.484247, 0.41049,  0.412761, 0.428816,
    0.345935, 0.517341, 0.461679, 0.458938, 0.51916,  0.469901, 0.57514,
    0.704194, 0.491722, 0.406555, 0.421629, 0.447756, 0.640889, 0.331644,
    0.709131, 0.346181, 0.363682, 0.554079, 0.430135, 0.636029, 0.296096,
    0.557414, 0.525635, 0.50177,  0.469558, 0.356278, 0.625921, 0.393837,
    0.638035, 0.635178, 0.332915, 0.72636,  0.32776,  0.631248, 0.50699,
    0.631123, 0.613255, 0.416699, 0.408749, 0.512786, 0.461627, 0.429043,
    0.595201, 0.499372, 0.411287, 0.595946, 0.499492, 0.490484, 0.527721,
    0.368341, 0.497892, 0.451804, 0.652041, 0.450306, 0.503061, 0.587495,
    0.19253,  0.450783, 0.553537, 0.432707, 0.394206, 0.358551, 0.315198,
    0.300865, 0.551403, 0.855391, 0.332921, 0.645445, 0.45144,  0.650995,
    0.440234, 0.444467, 0.520056, 0.388582, 0.419294, 0.596815, 0.324003,
    0.599026, 0.592656, 0.438737, 0.464197, 0.369553, 0.241449, 0.318352,
    0.627082, 0.659145, 0.695055, 0.425369, 0.490499, 0.51883,  0.334479,
    0.621001, 0.404374, 0.484016, 0.696071, 0.696371, 0.175323, 0.342199,
    0.595655, 0.486977, 0.290192, 0.565962, 0.422698, 0.573871, 0.607516,
    0.638235, 0.452562, 0.725699, 0.348729, 0.528695, 0.258405, 0.460051,
    0.33021,  0.614657, 0.305337, 0.502778, 0.323649, 0.395008, 0.513218,
    0.540056, 0.349681, 0.438531, 0.50592,  0.281691, 0.61579,  0.372172,
    0.60728,  0.669828, 0.400807, 0.659516, 0.500187, 0.544033, 0.504958,
    0.439883, 0.527783, 0.414979, 0.625235, 0.556243, 0.544938, 0.32923,
    0.292612, 0.226194, 0.414262, 0.502823, 0.350462, 0.382702, 0.474427,
    0.699498, 0.513473, 0.636363, 0.350154, 0.48102,  0.619017, 0.553695,
    0.548644, 0.442706, 0.379035, 0.548427, 0.554412, 0.413128, 0.448513,
    0.54337,  0.397757, 0.456866, 0.375422, 0.515079, 0.495184, 0.579316,
    0.595853, 0.332418, 0.529299, 0.502361, 0.402933, 0.553269, 0.428192,
    0.421633, 0.636744, 0.340091, 0.537278, 0.629241, 0.461686, 0.652402,
    0.557925, 0.290003, 0.481701, 0.407856, 0.728971, 0.469201, 0.346101,
    0.435424, 0.400319, 0.648333,
  };
  lGenerateNoise.generateNoiseSample(cMean, cDeviation);
  for (const auto& sample : lGenerateNoise.mNoise)
  {
    EXPECT_NEAR(static_cast<double>(samplesTest[iterator]),
                static_cast<double>(sample), cMaximumDeviation);
    ++iterator;
  }
}